For all: Give the time-complexity in big-O notation.


Exercise: (a) Merge two unsorted lists into a sorted one. (b) Merge a sorted and an unsorted list into one sorted one.

public List<T> merge(List<T> first,List <T> second)
	{
	if(first.size()==0&&second.size()==0)
		{
		return null;

		}
	else if(second.size()==0)
		{
		return first;

		}
	else if(first.size()==0)
		{
		return second;
		}

    List <T> third= first;
		for (T item: second)
			{
			  third.add(item);
			}
		Collections.sort(third);
		return third;
	}
public List<T> merge(List <T>first ,List<T> second)
	{
	if(first.size()==0&&second.size()==0)
		{
		return null;

		}
	else if(second.size()==0)
		{
		return first;

		}
	else if(first.size()==0)
		{
		return second;
		}
	 List <T> third=first;
	 Collections.sort(second);
	 int a=0;
	 int b=0;
	 while (a<first.size()&& b<second.size())
	 	{
	 		if(first.get(a)<second.size(b))
	 			{
	 				third.add(first.get(a));
	 				a++
	 			}
	 		else if(first.get(a)>second.size(b))
	 			{
	 				third.add(second.get(b));
	 				b++;
	 			}
	 		else 
	 			{
	 				third.add(first.get(a));
	 				third.add(second.get(b));
	 				a++;
	 				b++;
	 			} 

	 	}
	   if(a<first.size()-1)
	   {
	     for(int i=a;i<first.size();i++)
	     	{
	     	third.add(first.get(i));
	     	}
	   }
	   if(b<second.size()-1)
	   {
	     for(int i=b;i<second.size();i++)
	     	{
	     	third.add(second.get(i));
	     	}
	   }
	   return third;

	}


Exercise: Implement binary search (on your own ;-) ). Add a test method that tries all sorts of inputs.

public boolean Find(int [] a, int item)
  	{
  		int high =a.length();
  		int low =0;
  		int index= 0;
  		while{low<high}
  			{
  			 index=low+((high-low)/2);
              if(a[index]==item)
                {
                  return true;
                }
                else if(item >a[index])
                {
                low=index+1;

                }
                else
                {
                  high=index-1;
                }
  			}

  		  return false;

  	}


Exercise: Write the methods that insert and delete an element in a linked list at a given index. Assume the linked list has elements of generic type T.

public void insert(T item ,int index)
{
    Node current = head ;
    Node temp= new Node(item);
	for(int i=0 ;i<index&&current.getNext()!=null;i++)
	 {
	  current=current.getNext();
        
	 }
	 temp.setNext(current.getNext());
	 current.setNext(temp);
	 count++;


}
public boolean delete(int index)
{
    if(index <1 || index> count)
    {
      return false;
    }
    Node current = head ;
    
	for(int i=0 ;i<index ;i++)
	 {
	  if(current.getNext()==null)
	  	{
	  	 return false;
	  	}
	  current=current.getNext();
        
	 }
	 temp.setNext(current.getNext().getNext());
	 count--;
      return true;
	


}
Exercise: (a) Compute the mean (average) of a list of numbers. (b) Of two lists of numbers. (c) Of any number of lists of numbers.
public int average (List<Integer> first ,List <Integer> second)
	{
	   int Sum=0;
	   for(int i=0 ,i<first.size();i++)
	   		{
	   		  Sum+=first.get(i);
	   		}
	   for(int i=0 ,i<second.size();i++)
	   		{
	   		  Sum+=second.get(i);
	   		}
	   	return Sum/(first.size()+second.size());
	}
public int average(List<List> many)
	{
	    int Sum=0;
	    int number_of_items=0;
		for(int i=0;i<many.size();i++)
		{
		  for(int x=0; x<many.get(i).size();x++)
		  	{
		  	   Sum+=many.get(i).get(x);
		  	}
		  	number_of_items+=many.get(i).size();

		}
		return Sum/number_of_items;
	}


Exercise: (a) Compute the median (middle number) of a list of numbers. (b) Of two lists of numbers. Hint: Does it get easier if you assume the input lists are sorted?

public int median(List<Integer> items)
	{
	    int mid=tems.size()/2;
		int divisable=items.size()%2;
		if (divisable>0)
		{
		  return (items.get(mid)+items.get(mid+1))/2;
		}
		else
		{
		  return items.get(mid);
		}

	}
	public int median(List<Integer> items_a,List<Integer> items_a)
	{
	    List<integers> items_combine=merge(items_a ,items_b);
	    int mid=items_combine.size()/2;
		int divisable=items.size()%2;
		if (divisable>0)
		{
		  return (items.get(mid)+items.get(mid+1))/2;
		}
		else
		{
		  return items.get(mid);
		}

	}
	public List<Integer> merge (List<Integer> first , List <Integer> second)
	{ 
   		if(first.size()==0)
   		{
   		  return second;

   		}
   		else if(second.size()==0)
   		{
   		  return first;
  	 	}
   		else if(first.size()==0&&second.size()==0)
  		{
   		  return null;
   		}

   		int a=0;
   		int b=0;
   		List <Integer> third =new ArrayList <Integer>
  		while (a<first.size()||b<second.size())
   		  {
      		 if(first.get(a)<second.get(b))
       		  {
          		third.add(first.get(a))
          		a++;
       		  }
      		 else if(first.get(a)>second.get(b))
      		  {
          		third.add(second.get(b))
          		b++;
       		  }
      		 else
      		  {
                third.add(first.get(a))
                third.add(second.get(b))
                a++;
                b++;
              }

          }
     return third;
	
   }